{
  "name": "omml2img",
  "description": "Render Office MathML to image",
  "version": "0.0.6",
  "author": {
    "name": "Nikolay Norkin",
    "email": "n.e.norkin@gmail.com",
    "url": "zduderman.blogspot.ru"
  },
  "contributors": [
    {
      "name": "Pavel Sapachev",
      "email": "pavel@sapachev.com",
      "url": "http://sapachev.com"
    }
  ],
  "dependencies": {
    "imagemagick": ">=0.1.3",
    "libxslt": "^0.6.3",
    "underscore": "^1.8.3"
  },
  "engines": {
    "node": ">=5.0.0"
  },
  "keywords": [
    "omml",
    "image",
    "docx",
    "jpeg",
    "png",
    "gif"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/duderman/omml2img.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/duderman/omml2img/blob/master/LICENSE"
    }
  ],
  "homepage": "http://github.com/duderman/omml2img",
  "main": "index",
  "readme": "omml2img\n========\n\nNode module for converting Office MathML objects to images\n\nInstallation\n--------\nUse `npm` to install package\n\n    npm install omml2img\nUsage\n--------\nThe usage of module is very simple. All you need is pass to a function named `renderFromString` omml-text, options for renderer(optional) and callback. In that callback you will get the image data (if everything succes) or error (the Error instance if something went wrong). For example:\n```javascript\nrequire('omml2img').renderFromString(string_with_omml, {file_type: 'jpeg', encoding: 'base64' },\n    function(image, error){\n        if(error)\n            console.error('Oops :(', error);\n        else\n            console.log('OK! The image is', image.data);\n    });\n```\nOptions\n--------\nThere are few options that you can pass to a `renderFromString` function in `options` object:\n\n  * `encoding` - In which encoding image data will be returned. Default - utf8\n  * `backgroundColor`. Default - white\n  * `fontColor`. Default - 40\n  * `file_type` - File type for image. Default - png\n  * `remove_file` - Do you need to delete image file after parsing. If not there will be file path in result object. Default - true.\n\nMany of them identical with mml2xxx generator.\n\nThere is special constant `DEBUG` in source code. If it's true, information about rendering and execution will be printed to console.\nDependencies & Requirements\n--------\nThe module uses [JEuclid](http://jeuclid.sourceforge.net/) that work on Java. So Java must be installed on machine. Also, module will work only on linux. Sorry for that.\nThe libraries and programms you must install too use module:\n* [libxml2](http://www.xmlsoft.org/) (libxml2-dev package for Debian-based distros)\n* [libxslt](http://xmlsoft.org/xslt/index.html) (libxslt-dev package for Debian-based distros)\n* [libexslt](http://xmlsoft.org/xslt/EXSLT/) (libxslt-dev package for Debian-based distros)\n* xml2-config (Needs to be on PATH)\n* [ImageMagick](http://www.imagemagick.org/)",
  "readmeFilename": "README.md",
  "_id": "omml2img@0.0.5",
  "_from": "omml2img@",
  "bugs": {
    "url": "https://github.com/duderman/omml2img/issues"
  }
}
